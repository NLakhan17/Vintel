We are going to continue our linear regression tutorial series with the discussion of categorical and dummy variables as well as one hot encoding. As usual, I have home prices data here. But the thing that is different is this extra township column. Till now we were trying to predict the home prices in my hometown, which is Monroe Township. But we want to expand this problem further to the nearby towns. That's why I have home prices data for West Windsor and Robbinsville towns. Given this data, we want to build a predictor function that can take square foot of the home and name of the township as an input and it can tell me the price. Now, when you look at this data, the first question that arises in anyone's mind is how do you handle the tax data? Because machine learning models are good with handling the numeric data. So one way to do this would be to use integer encoding, or label encoding where you convert name of the town to a specific integer number as shown in the grid on the right hand side. But the problem with this approach could be that, just think, you are assigning numbers to these townships and when you give this to your model, which is working on the numbers, it will assume the orders and it will make assumptions such as Monroe Township is less than West Wind sir, which is less than Robbinsville or Mondo township, plus West Windsor is equal to Robbinsville. This doesn't quite make sense, isn't it? These variables are called categorical variables and the name of the township that we are dealing with, they are called nominal variable. Alright, so in categorical variables there are two types. First is nominal, where the categories don't have any numeric ordering in between that they don't have any order relationship between each other. Other type of nominal variables are male, female, or the name of the colors. The second type of categorical variable is called ordinal where the categories have some sort of numerical ordering in between them. For example, you are talking about your college degree. If it is graduate or masters or PhD, then you can say that graduate is less than master, which is less than PhD. And there are other examples of ordinal categories such as customer satisfaction survey, for example, where you give a rating such as satisfy, neutral or dissatisfied. And these you can order numerically. Now we know that we are dealing with nominal categorical variables and simple integer encoding is not going to work. Hence we are going to use a technique called one hot encoding. Pretty exotic name, isn't it? So the way one hot encoding works is you create a new column for each of your categories and assign binary value of one or zero. So as shown in the diagram here for Mondo township, I have put one here and remaining values are zero. Same thing for West Windsor and Robinsville. Alright, so we are going to use this one hot encoding technique to solve our problem. And these extra variables which are created, they are also called dummy variables. Alright, so enough of the talking. Let's write some code. In my Jupyter notebook I have loaded home prices into this data frame which looks like this. And the first step that I'm going to take is create those dummy variable columns. Pandas has this method called get dummies which will return the dummy variable columns. So my data frames category column is town and when I call get dummies method it will return me those three dummy columns per township. So if you have ten township it will create ten columns. I will store this data frame into this dummies variable. And the next step is to concatenate this dummies data frame with my original data frame. I will call that merged. And on pandas, as you know, probably there is a concate method which you can call to join two data frames. Alright, so it takes an array as an input where you will supply the two data frames that you want to join. So the first data frame is DF, the second one is dummies. You also need to tell how do you want to join. So the axis that you want to use is of course columns. And when you execute this you will get this kind of merge data frame. Now you need to drop the original down column here because you already have these dummy variable columns. You don't need this text column anyway because that's not going to work on our linear regression model. So we will drop this down column after we are done dropping this. The second thing that we want to do is drop one of these dummy variable column. Now why do we want to do it? You can google about dummy variable trap and what that concept means is whenever one variable can be derived from a rest of the variables, these variables are said to be multicollinear. And whenever you have multicollinearity in your data set, it creates the problem of dummy variable trap that can mess up your machine learning model. Hence the rule of the thumb is you have to drop one of the dummy variable columns. So if you have five dummy variables, let's say you drop one and you are left with four. We have three dummy variables here, so we are just going to drop one of them. You can pick any, any column out of these three. I'm going to drop Westminster column. Alright, so we are dropping two things from our merge data frame. Okay, I will just call it final and how do you drop it? So on the data frame you can call drop method. And in the array you can supply the things that you want to drop. So the first is town. And the second column that you want to drop is waste Windsor. You need to supply axis, column axis argument. Sorry. And the value will be columns. Let's execute this. All right. Now, my data frame looks pretty good. It has all numerical columns and one of the dummy variable column is top. Now remember that when you're using Sklearn linear regression model, it will work even if you don't drop it. Because linear regression model is aware about dummy variable trap and it will drop it automatically. But in general, it's a good practice that you drop it on your own. Now let's create a linear regression model. You all know from our previous tutorials that you need to import linear regression from our linear model. And then I will create an object of this class. Okay, I need to remove these brackets from here. So let's see. Okay, I have a typo here. Alright. So I have created my linear regression model object and now I need to give x and y for training. So what is my x? My x is all these columns except the price because price is your dependent variable. It is your yemenite. So your x is area Monroe Township and Robbinsville. And to easily get this x, what I'm going to do is again drop price column from my final data frame and then I have x. Now you see, price column is not here, so it is removed since it's a dependent variable and Y is nothing but a price column in your final data frame. Alright, I have my x and Y ready. So you all know the next step is to do a training. So when you do model dot fit, you are actually training your machine learning model. All right, we have very less data, so it's gonna take a fraction of second to perform the training. But in real life situation, you will have lots and lots of data. So your training step might take more time. And whenever you have huge volume of training data and if training is taking too much time and if you don't want to do training again and again, then you can save this model to a file and then you can load it later on whenever you want to perform the predictions. And I have another tutorial on how you can save your model to a file and load it back from the file. Okay, now the most interesting part, which is doing a prediction. First thing that I want to predict is price of a 2800 square feet home in Robbinsville. Let's see how my x looks and as per that I need to supply the parameters. So my x has first is area, the second one is Monroe and third one is Robinsville. Alright, so now I want to predict the price in Robinsville. So my second parameter needs to be one and the first parameter needs to be zero. Cool. So that's the price that I came up with. Next one is 3400 square foot home in Westminster and for that I'll just copy this cell, change the square foot to 3400. Let's see how my wish Windsor looks like. West Windsor means you need to supply zero in both of these dummy variable column. So I'll make this zero execute it. It is telling me a $681,000 now 3300 square foot home in west Windsor was 650. This is little bit bigger. So 681 kind of makes sense. If you want to know how accurate your model is, you can use model dot score method, supply your x and y and what it will do is it will calculate the predicted values for all of the rows in Xdev and then it will compare predictor value with the actual values, which is this y. After that it will use some formula to calculate the score. Here the score is 95, which means, sorry, 0.95, which means my model is 95% accurate. If the score is one, it means it is like perfect. So you use core method after you build your model to get an idea on how accurate it is. Now we are going to use sklearns one hot encoder to essentially do the same thing. What I have here is my data frame. And in order to use one hot encoder, first you need to do label encoding on the town column. So for that I will use label encoder from Sklearn pre processing and create the label encoder class object. The class object is ready and then use that on our original data frame. So we'll call it DF label encoded. That will be the resultant data frame and I will say Ali dot. So first, alright, so first let's create a new data frame. Alright, I will call it DF alley and that is equal to DF. The second step is use label encoder to fit and transform. Alright, so fit and transform means it takes the label column as an input. So my label column is down, okay? And it will convert, it will return the label. So labels are these. Basically it converted Monroe into zero, wastewinter is two and Robinsville is one. Alright? But you don't want this array, you want to just assign it back to your data frame column. So my DF, which is labeled encoded, looks something like this, right? So I have all my town categories converted into integer numbers. Once I have that, what I need to do next is create my x variable. Alright? So my model takes x and y. X is your training data set. Y is your dependent variable. X is here. Alright, what is max? X is town and area. Town area, because price is y. Right? And this time I will use values because I want x to be a two dimensional array and not a data frame. Okay? So if you call dot values on a data frame, you get two dimensional array and my y is. All right, let's see. Okay, so I think it's a reference variable. That's why it doesn't matter. Df, le dot values. That will be my y. No, it's not a values, it's price. Okay, so here is my x. Here is my y. Now if you remember, we need to create dummy variable columns here, right? So for that, let's import one hot encoder that is available in skill and pre processing module called one hat hot encoder. And I will create an object of this class first. Call it. Oh, and, oh again. Fit and transform. Fit and transform what? Okay, let's see. Fit and transform. Actually this x. Okay, now before you do x, if I just execute this, think about it, what will happen? It will assume all my x columns to be categorical variables. Hence, what you need to do when you create one hot and encoder is you need to specify categorical features. So what I'm saying is later on, whatever X I am supplying the 0th column in that x is my categorical feature. Okay? And you need to do one more thing which is converted to an array. So that is my x. Now. So my x looks something like this. This is actually 2600 square foot. Because of this epsilon, it looks like weird number. But don't worry about it. It is your 2600. This one is 3000 square foot. And what you have got here is 10 zero. So it created three dummy variable columns here. To avoid dummy variable trap, I'm going to drop one of the columns. I'll just drop the first column. And the way you do that into dimensional array is you will say take all the rows. So the first part, this one means take all the rows. And for the columns, takes all the columns. From index one onwards, this will essentially drop your 0th column. And when you execute this, your x looks like this. So you see you have three columns. Now, previously you had three plus 14. And in the end I drop this first column. Okay. All right. My x and Y is ready. So I'm going to just do a training on my model. Model dot fit, x and Y. My model is trained and ready. And now let's do some predictions. Okay, so in my x, the third column is the square foot. So the thing that we want to predict is 2800 square foot home in Robinsville. So that will be my third column. My first column is actually, let's see, it is wispy. It is Robbinsville, I think. Yeah, because I have Monroe, West Windsor and Robinsville. And if you look at this x here, that last one is Robinsville. Okay, so one means Robinsville. The second column is your Westminster. Okay. This is expecting two dimensional array, actually. So I'm just going to put extra bracket. Alright? So that's the price of my home in Robbinsville. Similarly, 3400 square foot home in west Windsor is gonna be this. And you notice that it gives me the same prediction as before, 681,590. If you compare that with result here, 681 and 590. So these are matching. Alright, so we just saw two methods of creating dummy variables. One was pandas get dummies method. And the second one was sklown preprocessing one hot encoder library. Okay, that's all I had for this tutorial. Now, I have an interesting exercise for you guys. So let me open my exercise folder and what I have here is the prices of different cars based on their mileage. So these are the used cars which were sold recently. This column contains how many miles is there on their automotive, their sale price and the age of the car. Okay, now, given this data, what you need to do is you need to predict the price of a Mercedes Benz that is four year old with a mileage of 45,000 miles. Second thing is you need to predict the price of BMW X five, that is seven year old with a mileage of 86,000 miles. Okay? And then in the end, you have to tell me the score of your model. So first, plot this data on a scatter plot chart and see if you can really use linear regression model because choosing the correct model is very important. So you want to make sure that linear regression model is going to work. And then you'll probably use dummy variable for this car model and then build a regression model to get the answers of these questions. The notebook used in this tutorial is available in the video description below. And the exercise folder is available at the same level as this notebook on my GitHub page. So go ahead, find it out and do this exercise. And in the comment section, let me know the answers that you find out of.