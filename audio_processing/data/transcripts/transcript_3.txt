Today we are going to write python code to predict home prices using a machine learning technique called simple linear regression. In this table, I have the prices of home based on the area of that home in my neighborhood in Monroe Township, New Jersey. Using this data, we'll build a machine learning model that can tell me the prices of the homes whose area is 3300. You can plot available prices and areas in form of a scatter plot like this, where this red marker shows the available data points. Now we can draw this blue line which best fits these data points. Once I have this line, I can tell the price of any home. Basically I can say, okay, 3300 square foot home gonna be this price once I have the linear equation. Now you might ask, how did you come up with this blue line? Because this line is not going through all these data points. And there are number of ways you can draw different lines, like for example this red and orange. Okay, so why did I choose this blue line? What we do is we calculate this delta which is an error between the actual data point and the data point which is predicted by your linear equation. We square individual errors and we sum them up and we try to minimize those. So we do this procedure for all these lines. So for orange, red and blue line, I repeated that procedure and what I found was this blue line was giving me the minimum error. Hence I chose that line. Now, if you remember from your algebra class during your school days, then you have probably learned the linear equations which looks like y is equal to mx plus b where m is a slope or gradient and b is an intercept. In our case, the slope is m here, but the y is price and an x variable is area. Area is called an independent variable, whereas price is called a dependent variable because we are calculating price based on this area. Now we are going to write python code for doing home price predictions. Here I have launched my Jupyter notebook. I have imported some useful libraries. The most important library here is from sklearn import linear model. So Sklearn is the library. It is also called scikit learn. So if you google it, you will find that this is the library we are using and it comes with anaconda installation. So once you have installed anaconda, you should have this library available for import. I have the prizes available in form of this CSV file. So the first thing I'm going to do is load this prices in pandas data frame. PD read CSV. Name of the file is home prices dot CSV and I have the data frame. Now if you don't know about pandas and data frame. I recommend you watching my tutorials on pandas because pandas is going to be extremely useful in your machine learning journey. Once I have a data frame, next thing that I'm going to do is plot a scatter plot just to get an idea on the distribution of my data point. Okay? And you all know if you have used Jupyter notebook before, is that you have to use matplotlib inline magic in order to draw the plots. And first I am going to plot dot scatter. So I'm going to plot area versus price. Okay, now I'll make some modification and I will set color to be red, marker to be plus I'm just making my chart little fancy and then also setting X and Y label because you can see that X and Y labels are not available right now. So the X label would be area in square feet and y label is the price in us dollar. Okay? So this is square feet area and us dollar price. Alright? So once I look at this plot, I get an idea that the distribution is suitable for a linear regression model and hence I will now go ahead and use the linear regression, okay? Okay, so first you need to create a linear regression object. So you can see that from sklearn Python module. I have already imported linear model and here linear regression. So I will create an object for linear regression and then I will fit my data. So fitting the data means you are training the linear regression model using the available data points. Okay, now the first argument has to be like a 2d array, so you can supply your data frame here. So I am going to supply a data frame which only contains area, okay? And the second argument would be your y axis on your plot, which is your price. So when I execute this, it worked, okay, without any error, which means now this linear regression model is ready to predict the prices. So let's do a prediction. So what we wanted to predict was the price of a home whose area is 3300. You can see that it predicted this price. Now you might be wondering why it came up with this price. So let's look at some of the internal details. So when I train my regression, linear regression object using this available data, what happened is it calculated the coefficient and intercept. So if you go back to our mathematical equation, you know that for any linear equation there is a slope and intercept. This is also called a coefficient. So my model calculated the value for m and b. So let's see, what are the values? Okay, so when you do reg, dot, co, f, it will show the value of coefficient which is this m. And when you do intercept, this is showing you the value for this b. Okay, so now the equation for price is m into area plus b. Okay, so now we have m area and b. So let's see what value it gives. So y is equal to m into x plus b. Okay. And here m is this number. So let me just copy it into x. X is the area that you want to predict. So area you want to predict is 3300 and your intercept is this. Okay, so when you execute this, you get this value. So now you know how it was able to predict this value right here. Okay. Similarly if you change this to the second value that we wanted to predict was the 5000 sqft. So for 5000 you can just do this and you get this value right here. So this is pretty amazing. Now you have a model which you can use to predict your home prices. You might have a CSV file like this where you have list of prices, list of areas available and you want to predict the prices for these homes. Right? Until now what we did is we were individually giving the area and we are predicting the prices. So what I want to do now is generate another CSV file where I have these list of areas and their corresponding prediction on prices. So for this I will create a data frame first using read CSV. So here, first I created a data frame, I have list of areas available. Now I will use regression model to actually predict the prices. Okay, so I'll just supply d here and that will return me the prices. So you can store the prices in variable PD. And then what you can do is in your original data frame you can create a new column. So when you do like this, it will create a new column in your data frame and you can assign p here. Okay. And now when you print your data frame you can see the prices are available and then you can just use to CSV method to export the value to prediction dot CSV. So if I open my prediction CSV, you will now find that I have area and prices. It exported actually the index as well. And if you don't want to do that then index is equal to false. If you do that and execute this again. And now if you open prediction dot CSV, you won't find the index, it will be just area and prices as you can see here. Okay, so once you have this model built in, you can apply this model on a huge CSV file and come up with a list of predictions. Now going back to our original example. So let me go back again here and read my original prices and do a fitting on that. What I want to show you is how does my linear equation line look? Okay. And for that I'm again plotting a scatter plot. And along with the scatter plot, so this much line of code will just plot the scatter plot. And I have added one more line where I'm using data frames area and I am predicting the prices and plotting them on the y chart. So let's see what happened here. So DF area is not defined. So that has to be df area here. Okay, so let's go step by step. So here I have my scatter plot and what I'm doing is plt dot plot. On my x axis I want df area, and on my y axis I want to, I want to predict area like this. Okay? So it shows the visual representation of my linear equation here. Alright, so that's all I had for this tutorial. I have an exercise for you guys. What you want to do is given Canada's adjusted net national income per capita, you want to predict the net income in year 2020. I have provided a CSV file in the exercise folder. So if you go to GitHub and download my notebook, and I have by the way, the link of Jupyter notebook available in the video description below. So download the notebook, study it first and then download the exercise folder. In the exercise folder you will find this CSV file which has Canada's per capita income for the year 1970 2016. And your job is to find out the predicted income in year 2020. I highly recommend that you do the exercise because just by watching the video you are not probably going to learn that much. I mean, you'll learn something, but it's not very effective. So it's, it's better that you do some practice as well as we go through these tutorials and I'll make sure I provide simple exercises at the end of every tutorial. Okay, so again, just to summarize, this tutorial was all about building a simple linear regression model using one variable. And in the future we are going to cover a little more complex linear regression models. Thank you, bye.